// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	choco "github.com/lsc-chocos/choco"
	mock "github.com/stretchr/testify/mock"
)

// SensorBuffer is an autogenerated mock type for the SensorBuffer type
type SensorBuffer struct {
	mock.Mock
}

// DumpSenML provides a mock function with given fields:
func (_m *SensorBuffer) DumpSenML() ([]map[string]interface{}, error) {
	ret := _m.Called()

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func() []map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Snapshot provides a mock function with given fields:
func (_m *SensorBuffer) Snapshot() (choco.SensorData, error) {
	ret := _m.Called()

	var r0 choco.SensorData
	if rf, ok := ret.Get(0).(func() choco.SensorData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(choco.SensorData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: data
func (_m *SensorBuffer) UpdateData(data choco.SensorData) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(choco.SensorData) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
