// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	choco "github.com/lsc-chocos/choco"
	mock "github.com/stretchr/testify/mock"

	state "github.com/lsc-chocos/choco/state"
)

// Sensor is an autogenerated mock type for the Sensor type
type Sensor struct {
	mock.Mock
}

// GetState provides a mock function with given fields:
func (_m *Sensor) GetState() (state.State, error) {
	ret := _m.Called()

	var r0 state.State
	if rf, ok := ret.Get(0).(func() state.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(state.State)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Sensor) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *Sensor) Run() {
	_m.Called()
}

// SenML provides a mock function with given fields:
func (_m *Sensor) SenML() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetState provides a mock function with given fields: _a0
func (_m *Sensor) SetState(_a0 state.State) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(state.State) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snapshot provides a mock function with given fields:
func (_m *Sensor) Snapshot() choco.SensorData {
	ret := _m.Called()

	var r0 choco.SensorData
	if rf, ok := ret.Get(0).(func() choco.SensorData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(choco.SensorData)
		}
	}

	return r0
}

// UpdateData provides a mock function with given fields: _a0
func (_m *Sensor) UpdateData(_a0 choco.SensorData) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(choco.SensorData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
