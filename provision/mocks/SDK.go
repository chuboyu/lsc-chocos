// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	sdk "github.com/lsc-chocos/mainflux/sdk/go"
	mock "github.com/stretchr/testify/mock"
)

// SDK is an autogenerated mock type for the SDK type
type SDK struct {
	mock.Mock
}

// Channel provides a mock function with given fields: id, token
func (_m *SDK) Channel(id string, token string) (sdk.Channel, error) {
	ret := _m.Called(id, token)

	var r0 sdk.Channel
	if rf, ok := ret.Get(0).(func(string, string) sdk.Channel); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.Channel)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Channels provides a mock function with given fields: token, offset, limit, name
func (_m *SDK) Channels(token string, offset uint64, limit uint64, name string) (sdk.ChannelsPage, error) {
	ret := _m.Called(token, offset, limit, name)

	var r0 sdk.ChannelsPage
	if rf, ok := ret.Get(0).(func(string, uint64, uint64, string) sdk.ChannelsPage); ok {
		r0 = rf(token, offset, limit, name)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64, string) error); ok {
		r1 = rf(token, offset, limit, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelsByThing provides a mock function with given fields: token, thingID, offset, limit
func (_m *SDK) ChannelsByThing(token string, thingID string, offset uint64, limit uint64) (sdk.ChannelsPage, error) {
	ret := _m.Called(token, thingID, offset, limit)

	var r0 sdk.ChannelsPage
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64) sdk.ChannelsPage); ok {
		r0 = rf(token, thingID, offset, limit)
	} else {
		r0 = ret.Get(0).(sdk.ChannelsPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, uint64) error); ok {
		r1 = rf(token, thingID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: conns, token
func (_m *SDK) Connect(conns sdk.ConnectionIDs, token string) error {
	ret := _m.Called(conns, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.ConnectionIDs, string) error); ok {
		r0 = rf(conns, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConnectThing provides a mock function with given fields: thingID, chanID, token
func (_m *SDK) ConnectThing(thingID string, chanID string, token string) error {
	ret := _m.Called(thingID, chanID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(thingID, chanID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChannel provides a mock function with given fields: channel, token
func (_m *SDK) CreateChannel(channel sdk.Channel, token string) (string, error) {
	ret := _m.Called(channel, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(sdk.Channel, string) string); ok {
		r0 = rf(channel, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sdk.Channel, string) error); ok {
		r1 = rf(channel, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannels provides a mock function with given fields: channels, token
func (_m *SDK) CreateChannels(channels []sdk.Channel, token string) ([]sdk.Channel, error) {
	ret := _m.Called(channels, token)

	var r0 []sdk.Channel
	if rf, ok := ret.Get(0).(func([]sdk.Channel, string) []sdk.Channel); ok {
		r0 = rf(channels, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]sdk.Channel, string) error); ok {
		r1 = rf(channels, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThing provides a mock function with given fields: thing, token
func (_m *SDK) CreateThing(thing sdk.Thing, token string) (string, error) {
	ret := _m.Called(thing, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(sdk.Thing, string) string); ok {
		r0 = rf(thing, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sdk.Thing, string) error); ok {
		r1 = rf(thing, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThings provides a mock function with given fields: things, token
func (_m *SDK) CreateThings(things []sdk.Thing, token string) ([]sdk.Thing, error) {
	ret := _m.Called(things, token)

	var r0 []sdk.Thing
	if rf, ok := ret.Get(0).(func([]sdk.Thing, string) []sdk.Thing); ok {
		r0 = rf(things, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sdk.Thing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]sdk.Thing, string) error); ok {
		r1 = rf(things, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: user
func (_m *SDK) CreateToken(user sdk.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(sdk.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(sdk.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *SDK) CreateUser(user sdk.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChannel provides a mock function with given fields: id, token
func (_m *SDK) DeleteChannel(id string, token string) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteThing provides a mock function with given fields: id, token
func (_m *SDK) DeleteThing(id string, token string) error {
	ret := _m.Called(id, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisconnectThing provides a mock function with given fields: thingID, chanID, token
func (_m *SDK) DisconnectThing(thingID string, chanID string, token string) error {
	ret := _m.Called(thingID, chanID, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(thingID, chanID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMessages provides a mock function with given fields: chanID, token
func (_m *SDK) ReadMessages(chanID string, token string) (sdk.MessagesPage, error) {
	ret := _m.Called(chanID, token)

	var r0 sdk.MessagesPage
	if rf, ok := ret.Get(0).(func(string, string) sdk.MessagesPage); ok {
		r0 = rf(chanID, token)
	} else {
		r0 = ret.Get(0).(sdk.MessagesPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(chanID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: chanID, msg, token
func (_m *SDK) SendMessage(chanID string, msg string, token string) error {
	ret := _m.Called(chanID, msg, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(chanID, msg, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetContentType provides a mock function with given fields: ct
func (_m *SDK) SetContentType(ct sdk.ContentType) error {
	ret := _m.Called(ct)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.ContentType) error); ok {
		r0 = rf(ct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Thing provides a mock function with given fields: id, token
func (_m *SDK) Thing(id string, token string) (sdk.Thing, error) {
	ret := _m.Called(id, token)

	var r0 sdk.Thing
	if rf, ok := ret.Get(0).(func(string, string) sdk.Thing); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Get(0).(sdk.Thing)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Things provides a mock function with given fields: token, offset, limit, name
func (_m *SDK) Things(token string, offset uint64, limit uint64, name string) (sdk.ThingsPage, error) {
	ret := _m.Called(token, offset, limit, name)

	var r0 sdk.ThingsPage
	if rf, ok := ret.Get(0).(func(string, uint64, uint64, string) sdk.ThingsPage); ok {
		r0 = rf(token, offset, limit, name)
	} else {
		r0 = ret.Get(0).(sdk.ThingsPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64, string) error); ok {
		r1 = rf(token, offset, limit, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThingsByChannel provides a mock function with given fields: token, chanID, offset, limit
func (_m *SDK) ThingsByChannel(token string, chanID string, offset uint64, limit uint64) (sdk.ThingsPage, error) {
	ret := _m.Called(token, chanID, offset, limit)

	var r0 sdk.ThingsPage
	if rf, ok := ret.Get(0).(func(string, string, uint64, uint64) sdk.ThingsPage); ok {
		r0 = rf(token, chanID, offset, limit)
	} else {
		r0 = ret.Get(0).(sdk.ThingsPage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, uint64) error); ok {
		r1 = rf(token, chanID, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: channel, token
func (_m *SDK) UpdateChannel(channel sdk.Channel, token string) error {
	ret := _m.Called(channel, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Channel, string) error); ok {
		r0 = rf(channel, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThing provides a mock function with given fields: thing, token
func (_m *SDK) UpdateThing(thing sdk.Thing, token string) error {
	ret := _m.Called(thing, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(sdk.Thing, string) error); ok {
		r0 = rf(thing, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *SDK) Version() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
